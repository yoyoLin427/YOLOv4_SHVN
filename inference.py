# -*- coding: utf-8 -*-
"""「inference.ipynb」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mkPeyi8yzdhkvIJb29P_kWZWNkVgKbN8

# STEP 0: Use GPU
"""

# Make sure you use the Colab GPU to run the testing phase

import torch
torch.cuda.is_available()

# Show the GPU info

!nvidia-smi

"""# STEP 1: Git clone your project"""

# Git clone your project

!git clone https://github.com/yoyoLin427/YOLOv4_SHVN.git

"""# STEP 2: Install your requirements"""

import os
os.makedirs('/work1')
!ln -s '/content/YOLOv4_SHVN/svhn_HW2' /work1

os.makedirs('/work1/svhn_HW2/weights')

from google_drive_downloader import GoogleDriveDownloader as gdd

gdd.download_file_from_google_drive(file_id='1thNUoNLstoFjexFF6RoTzZd3jq9WqGSi',
                                    dest_path='/work1/svhn_HW2/weights/yolov4_10000.weights',
                                    unzip=False)
gdd.download_file_from_google_drive(file_id='1mTtX7LZvZe3Be6SJ9kzXfOTVBbiwQGoG',
                                    dest_path='./darknet.zip',
                                    unzip=False)

# Commented out IPython magic to ensure Python compatibility.
!unzip /content/darknet.zip
# go into darknet folder
# %cd darknet

# You must import the below 5 packages 
import os
import cv2
import time
from tqdm import tqdm

"""# STEP 3: Wget testing data """

# 1. Download the testing data

gdd.download_file_from_google_drive(file_id='1Fm-avdeNgzhPxhvia0iw9yZzcoOggy7I',
                                    dest_path='./test.zip',
                                    unzip=True)

# 2. Read the image_name and put them into the list
# You need to modify the path to fit your test_folder
data_listdir = os.listdir("test")

#test
!./darknet detector test /work1/svhn_HW2/obj.data /work1/svhn_HW2/yolov4_1124.cfg /work1/svhn_HW2/weights/yolov4_10000.weights test/499865.png
import cv2
from google.colab.patches import cv2_imshow
image = cv2.imread('predictions.jpg')
cv2_imshow(image)

"""# STEP 4: Generate answer.json for submission on Codalab
The answer.json has the same format as [COCO dataset results](https://cocodataset.org/#format-results)
"""

### Pseudo code for generating submission file

import os
data_listdir = os.listdir("test")
data_listdir.sort(key = lambda x: int(x[:-4]))

f = open('valid.txt','w')
for x in data_listdir:
  f.write('test/'+x)
  f.write('\n')
  print(x)
  f.close

import os
data_listdir = os.listdir("test")
data_listdir.sort(key = lambda x: int(x[:-4]))

f = open('valid.txt','w')
for x in data_listdir:
  f.write('test/'+x)
  f.write('\n')
  print(x)
  f.close

"""一定要加 -dont_show

不然不知道為甚麼只會讀到valid.txt的第一行

加-dont_show才可以讀到valid.txt所有檔案
"""

!./darknet detector test /work1/svhn_HW2/obj.data /work1/svhn_HW2/yolov4_1124.cfg /work1/svhn_HW2/weights/yolov4_10000.weights -dont_show -ext_output < valid.txt > result.txt

import json
result_to_json = []

f = open('result.txt')
save = False
img_id = ''
for line in f.readlines():
  if 'test/' in line:
    result = line.split()
    save = True
    img_id = result[0][:-5]
    img_id = int(img_id[5:])
  elif save == True and '%' in line:
    result = line.split()
    label = result[0][:-1]
    if '10' in label:
      label = '0'
    label = int(label)
    score = float(result[1][:-1])/100 
    x = float(result[3])
    y = float(result[5])
    w = float(result[7])
    h = float(result[9][:-1])
    #print('img_id:'+img_id+' label:'+label+' score:'+score+ ' x:'+x+' y:'+y+' w:'+w+' h:'+h)

    det_box_info = {}
    det_box_info["image_id"] = img_id
    det_box_info["bbox"] = [x,y,w,h]
    det_box_info["score"] = score
    det_box_info["category_id"] = label
        
    result_to_json.append(det_box_info)


  elif save == True and 'Enter' in line:
    save = False
f.close()

# Write the list to answer.json 
json_object = json.dumps(result_to_json, indent=4)

with open("answer.json", "w") as outfile:
  outfile.write(json_object)

"""# STEP 5: Run inferene and bench mark

### Please **screenshot** this cell, including the code and the output (your inference time), and put it into your report.
"""

import os
f = open('benchmark.txt','w')

TEST_IMAGE_NUMBER = 100 # This number is fixed.


# Read image (Be careful with the image order)
data_listdir = os.listdir("test")
data_listdir.sort(key = lambda x: int(x[:-4]))
for img_name in data_listdir[:TEST_IMAGE_NUMBER]:

  f.write('test/'+img_name)
  f.write('\n')
  f.close

"""I don’t know why sometimes writing a txt file is unsuccessful, 

so I execute it twice just in case.
"""

import os
f = open('benchmark.txt','w')

TEST_IMAGE_NUMBER = 100 # This number is fixed.


# Read image (Be careful with the image order)
data_listdir = os.listdir("test")
data_listdir.sort(key = lambda x: int(x[:-4]))
for img_name in data_listdir[:TEST_IMAGE_NUMBER]:

  f.write('test/'+img_name)
  f.write('\n')
  f.close

start_time = time.time()
!./darknet detector test /work1/svhn_HW2/obj.data /work1/svhn_HW2/yolov4_1124.cfg /work1/svhn_HW2/weights/yolov4_10000.weights -dont_show -ext_output < benchmark.txt > result.txt 

end_time  = time.time()
print("\nInference time per image: ", (end_time - start_time) / 100)

"""# STEP 6: Share this notebook link on your GitHub/GitLab Readme.MD
Click the share on the right top buttom 
"""

